#!/usr/bin/env python

import urllib
import urlparse
import sys

class YouTubeAPIError(Exception):
    """Raised when the YouTube API returns something that we don't understand."""
    pass

class YTURL():
    """Functions to get direct URLs to YouTube media."""
    def getItagQualityOrder(self):
        """Return itags in order of quality preference."""
        itags = {
        #   itag   v-dimensions v-bitrate a-bitrate a-samplerate
            "5":  (400*240,     0.25,     64,       22.05),
            "6":  (480*270,     0.8,      64,       22.05),
            "13": (176*144,     0.5,      64,       22.05),
            "17": (176*144,     2,        64,       22.05),
            "18": (640*360,     0.5,      128,      44.1),
            "22": (1280*720,    2.9,      96,       44.1),
            "34": (640*360,     0.5,      128,      44.1),
            "35": (854*480,     1,        128,      44.1),
            "37": (1920*1080,   2.9,      152,      44.1),
            "38": (4096*3072,   5,        152,      44.1),
            "43": (640*360,     0.5,      128,      44.1),
            "44": (854*480,     1,        128,      44.1),
            "45": (1280*720,    2,        192,      44.1),
        }
        return sorted(itags, reverse=True, key=lambda x: itags[x])

    def stripToYouTubeVideoID(self, url):
        """Strip URL to the video ID contained."""
        try:
            parsedURL = urlparse.urlparse(url).query
            return urlparse.parse_qs(parsedURL)["v"][0][:11]
        except (ValueError, KeyError):
            return url.split("/")[-1][:11]

    def getAvailableVideoItags(self, videoID):
        """Return available itags and their associated URLs as a list."""
        apiResponse = urllib.urlopen("http://youtube.com/get_video_info?video_id=" + videoID)
        parsedResponse = urlparse.parse_qs(apiResponse.read())
        
        try:
            for videoFormat in parsedResponse["url_encoded_fmt_stream_map"][0].split(","):
                parsedFormat = urlparse.parse_qs(videoFormat)
                yield (
                    parsedFormat["itag"][0],
                    "%s&signature=%s" % (parsedFormat["url"][0], parsedFormat["sig"][0])
                )
        except (KeyError, IndexError):
            raise YouTubeAPIError("API returned failure: %s" % apiData["reason"][0])

    def getDesiredItagOrder(self, desired, quality):
        """Return the desired itag sorting."""
        if len(desired) == 1:
            return zip(*sorted(enumerate(quality), key=lambda (i,x):abs(quality.index(desired[0])-i)))[1]
        return desired + quality

if __name__ == "__main__":
    if len(sys.argv) < 2:
        raise SyntaxError("Usage: yturl id [itag ...]")
    y = YTURL()
    videoItagQualityOrder = y.getItagQualityOrder()
    if not set(sys.argv[2:]).issubset(videoItagQualityOrder):
        raise ValueError("Invalid itag(s): %s" % ", ".join(set(sys.argv[2:]).difference(videoItagQualityOrder)))
    availableItags = dict(y.getAvailableVideoItags(y.stripToYouTubeVideoID(sys.argv[1])))
    for fmt in y.getDesiredItagOrder(sys.argv[2:], videoItagQualityOrder):
        if fmt in availableItags:
            print >> sys.stderr, "Using itag %s." % fmt 
            print availableItags[fmt]
            break
    else:
        print >> sys.stderr, "No locally known itags available. Unknown itags: %s" % ", ".join(availableItags) 
