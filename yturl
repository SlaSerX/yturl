#!/usr/bin/env python
# vim: set fileencoding=utf-8 :

"""Prints direct URLs to YouTube media."""

# (c) Christopher Down 2011-2012
# See the COPYING file for copyright information.

from urllib import urlopen
from urlparse import parse_qs
import sys

__version__ = 1.02

class YouTubeAPIError(Exception):
    """Raised when the YouTube API returns something that we don't understand."""
    pass

class YTURL():
    """Prints direct URLs to YouTube media."""
    def __init__(self):
        """Seed itag quality order at runtime."""
        self.videoItagQualityOrder = self.getItagQualityOrder()

    def getItagQualityOrder(self):
        """Return itags in order of quality preference."""
        itags = {
         #  itag v-dimensions v-bitrate a-bitrate a-samplerate
            5:  (400*240,     0.25,     64,       22.05),
            6:  (480*270,     0.80,     64,       22.05),
            13: (176*144,     0.50,     64,       22.05),
            17: (176*144,     2.00,     64,       22.05),
            18: (640*360,     0.50,     128,      44.1),
            22: (1280*720,    2.90,     96,       44.1),
            34: (640*360,     0.50,     128,      44.1),
            35: (854*480,     1.00,     128,      44.1),
            37: (1920*1080,   2.90,     152,      44.1),
            38: (4096*3072,   5.00,     152,      44.1),
            43: (640*360,     0.50,     128,      44.1),
            44: (854*480,     1.00,     128,      44.1),
            45: (1280*720,    2.00,     192,      44.1),
        }
        return sorted(itags, reverse=1, key=lambda x: (itags[x][0],itags[x][1],itags[x][2],itags[x][3]))

    def stripYouTubeQueryString(self, url):
        """Strip URL to the video ID contained."""
        if "?" in url:
            urlPost = parse_qs(url[url.index("?")+1:])
            for key in ("v", "video_id"):
                if key in urlPost:
                    return urlPost[key][0]
        return url.split("/")[-1]

    def getVideoItags(self, videoID):
        """Return available itags and their associated URLs as a list."""
        availableFormats = {}
        parsedResponse = parse_qs(urlopen("http://youtube.com/get_video_info?&video_id=%s&el=detailpage&ps=default&eurl=&gl=US&hl=en" % videoID).read())
        if not "url_encoded_fmt_stream_map" in parsedResponse:
            raise YoutubeAPIError("Missing format map")
        for videoFormat in map(parse_qs, parsedResponse["url_encoded_fmt_stream_map"][0].split(",")):
            availableFormats[int(videoFormat["itag"][0])] = videoFormat["url"][0]
        return availableFormats

    def getPreferredItagOrder(self, preferredItags):
        """Return the preferred itag sort."""
        if len(preferredItags) == 1:
            v = self.videoItagQualityOrder
            return zip(*sorted(enumerate(v),key=lambda (i,x):abs(v.index(preferredItags[0])-i)))[1]
        elif len(preferredItags) > 1:
            return preferredItags + self.videoItagQualityOrder
        return self.videoItagQualityOrder

def main():
    """Run main program."""
    y = YTURL()
    if len(sys.argv) < 2:
        raise SyntaxError("Usage: yturl id [itag ...]")
    for itag in sys.argv[2:]:
        if not itag.isdigit() or int(itag) not in y.videoItagQualityOrder:
            raise SyntaxError("%s is not a valid itag." % itag)
    videoID = y.stripYouTubeQueryString(sys.argv[1])
    availableFormats = y.getVideoItags(videoID)
    for itag in y.getPreferredItagOrder(map(int, sys.argv[2:])):
        if itag in availableFormats:
            print >> sys.stderr, "Using itag %d." % itag
            print availableFormats[itag]
            return True
    raise YouTubeAPIError("No local itags available!")

if __name__ == "__main__":
    main()
