#!/usr/bin/env python

"""Get direct URLs to YouTube videos."""

import argparse
import sys
import urllib
import urlparse
import json

class ItagLoadError(Exception):
    """Raised when we can't get our local itag database."""
    pass

class YouTubeAPIError(Exception):
    """Raised when the YouTube API returns unknown data."""
    pass

def getItagQualityOrder(itags):
    return sorted(itags, reverse=True, key=lambda x: (
        itags[x]["video"]["dimensions"]["width"] * itags[x]["video"]["dimensions"]["height"],
        itags[x]["video"]["bitrate"],
        itags[x]["audio"]["bitrate"],
        itags[x]["audio"]["samplerate"]
    ))

def stripToYouTubeVideoID(url):
    """Strip URL to the video ID contained."""
    try:
        parsed = urlparse.urlparse(url).query
        return urlparse.parse_qs(parsed)["v"][0][:11]
    except (ValueError, KeyError):
        return url.split("/")[-1][:11]

def getAvailableVideoItags(videoID):
    """Return available itags and their associated URLs as a list."""
    url = "http://youtube.com/get_video_info?hl=en&video_id=" + videoID
    res = urllib.urlopen(url)
    res = urlparse.parse_qs(res.read())
    try:
        for fmt in res["url_encoded_fmt_stream_map"][0].split(","):
            fmt = urlparse.parse_qs(fmt)
            yield (
                fmt["itag"][0],
                "%s&signature=%s" % (fmt["url"][0], fmt["sig"][0])
            )
    except (KeyError, IndexError):
        raise YouTubeAPIError("API returned failure: %s" % res["reason"][0])

def getDesiredItagOrder(userItags, qualityItags):
    """Return the desired itag sorting."""
    if len(userItags) == 1:
        return zip(*sorted(
            enumerate(qualityItags),
            key=lambda (i, _): abs(qualityItags.index(userItags[0]) - i))
        )[1]
    return userItags + qualityItags

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "videoID",
        help="The YouTube video ID, or a URL containing it"
    )
    parser.add_argument(
        "itag",
        help="A format specification, see http://goo.gl/uEIuR",
        nargs="*"
    )
    parser.add_argument(
        "-c", "--config",
        help="The path to an alternative configuration file.",
        default="/etc/yturl/itags"
    )
    args = parser.parse_args()

    try:
        with open(args.config) as f:
            knownItags = json.load(f)
    except (IOError, OSError), e:
        raise ItagLoadError("Can't load itags file %s: %s" %
            (args.config, e.args[1])
        )

    userItags = args.itag
    videoID = stripToYouTubeVideoID(args.videoID)
    qualityItags = getItagQualityOrder(knownItags)
    availableItags = dict(getAvailableVideoItags(videoID))
    unknownItags = [ x for x in userItags if x not in qualityItags ]

    if unknownItags:
        raise ValueError("Invalid itag(s): " + ", ".join(unknownItags))

    desiredItagOrder = getDesiredItagOrder(userItags, qualityItags)
    desiredItag = [ x for x in desiredItagOrder if x in availableItags ]
    if desiredItag:
        print availableItags[desiredItag[0]]
        print >> sys.stderr, "Using itag %s." % desiredItag[0]
    else:
        print >> sys.stderr, "No local itags available."
